import Gaffer
import GafferImage
import GafferML
import GafferOSL
import IECore
import imath

Gaffer.Metadata.registerValue( parent, "serialiser:milestoneVersion", 1, persistent=False )
Gaffer.Metadata.registerValue( parent, "serialiser:majorVersion", 5, persistent=False )
Gaffer.Metadata.registerValue( parent, "serialiser:minorVersion", 3, persistent=False )
Gaffer.Metadata.registerValue( parent, "serialiser:patchVersion", 0, persistent=False )

__children = {}

parent["variables"].addChild( Gaffer.NameValuePlug( "image:catalogue:port", Gaffer.IntPlug( "value", defaultValue = 0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ), "imageCataloguePort", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
parent["variables"].addChild( Gaffer.NameValuePlug( "project:name", Gaffer.StringPlug( "value", defaultValue = 'default', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ), "projectName", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
parent["variables"].addChild( Gaffer.NameValuePlug( "project:rootDirectory", Gaffer.StringPlug( "value", defaultValue = '$HOME/gaffer/projects/${project:name}', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ), "projectRootDirectory", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
parent["variables"].addChild( Gaffer.NameValuePlug( "renderPass", Gaffer.StringPlug( "value", defaultValue = '', ), "renderPass", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["openColorIO"] = GafferImage.OpenColorIOConfigPlug( "openColorIO", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["openColorIO"] )
__children["defaultFormat"] = GafferImage.FormatPlug( "defaultFormat", defaultValue = GafferImage.Format( 1920, 1080, 1.000 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["defaultFormat"] )
__children["ImageReader"] = GafferImage.ImageReader( "ImageReader" )
parent.addChild( __children["ImageReader"] )
__children["ImageReader"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["ImageToTensor"] = GafferML.ImageToTensor( "ImageToTensor" )
parent.addChild( __children["ImageToTensor"] )
__children["ImageToTensor"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Inference16"] = GafferML.Inference( "Inference16" )
parent.addChild( __children["Inference16"] )
__children["Inference16"]["in"].resize( 1 )
__children["Inference16"]["out"].resize( 1 )
__children["Inference16"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["TensorToImage"] = GafferML.TensorToImage( "TensorToImage" )
parent.addChild( __children["TensorToImage"] )
__children["TensorToImage"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Resize"] = GafferImage.Resize( "Resize" )
parent.addChild( __children["Resize"] )
__children["Resize"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Resize1"] = GafferImage.Resize( "Resize1" )
parent.addChild( __children["Resize1"] )
__children["Resize1"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["OSLImage"] = GafferOSL.OSLImage( "OSLImage" )
parent.addChild( __children["OSLImage"] )
__children["OSLImage"]["channels"].addChild( Gaffer.NameValuePlug( "", Gaffer.Color3fPlug( "value", defaultValue = imath.Color3f( 1, 1, 1 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ), True, "channel", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["OSLImage"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["InLayer1"] = GafferOSL.OSLShader( "InLayer1" )
parent.addChild( __children["InLayer1"] )
__children["InLayer1"].loadShader( "ImageProcessing/InLayer" )
__children["InLayer1"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["to_yCbCr"] = GafferOSL.OSLCode( "to_yCbCr" )
parent.addChild( __children["to_yCbCr"] )
__children["to_yCbCr"]["parameters"].addChild( Gaffer.Color3fPlug( "input1", defaultValue = imath.Color3f( 0, 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["to_yCbCr"]["out"].addChild( Gaffer.Color3fPlug( "output1", direction = Gaffer.Plug.Direction.Out, defaultValue = imath.Color3f( 0, 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["to_yCbCr"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["OSLImage2"] = GafferOSL.OSLImage( "OSLImage2" )
parent.addChild( __children["OSLImage2"] )
__children["OSLImage2"]["channels"].addChild( Gaffer.NameValuePlug( "", Gaffer.Color3fPlug( "value", defaultValue = imath.Color3f( 1, 1, 1 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ), True, "channel", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["OSLImage2"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Resize4"] = GafferImage.Resize( "Resize4" )
parent.addChild( __children["Resize4"] )
__children["Resize4"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["CopyChannels"] = GafferImage.CopyChannels( "CopyChannels" )
parent.addChild( __children["CopyChannels"] )
__children["CopyChannels"]["in"].resize( 3 )
__children["CopyChannels"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["to_rgb"] = GafferOSL.OSLCode( "to_rgb" )
parent.addChild( __children["to_rgb"] )
__children["to_rgb"]["parameters"].addChild( Gaffer.Color3fPlug( "input1", defaultValue = imath.Color3f( 0, 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["to_rgb"]["out"].addChild( Gaffer.Color3fPlug( "output1", direction = Gaffer.Plug.Direction.Out, defaultValue = imath.Color3f( 0, 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["to_rgb"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["InLayer"] = GafferOSL.OSLShader( "InLayer" )
parent.addChild( __children["InLayer"] )
__children["InLayer"].loadShader( "ImageProcessing/InLayer" )
__children["InLayer"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Resize5"] = GafferImage.Resize( "Resize5" )
parent.addChild( __children["Resize5"] )
__children["Resize5"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Resize6"] = GafferImage.Resize( "Resize6" )
parent.addChild( __children["Resize6"] )
__children["Resize6"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Dot"] = Gaffer.Dot( "Dot" )
parent.addChild( __children["Dot"] )
__children["Dot"].setup( GafferImage.ImagePlug( "in", ) )
__children["Dot"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Dot1"] = Gaffer.Dot( "Dot1" )
parent.addChild( __children["Dot1"] )
__children["Dot1"].setup( GafferImage.ImagePlug( "in", ) )
__children["Dot1"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["ContactSheet"] = GafferImage.ContactSheet( "ContactSheet" )
parent.addChild( __children["ContactSheet"] )
__children["ContactSheet"]["in"].resize( 3 )
__children["ContactSheet"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Text"] = GafferImage.Text( "Text" )
parent.addChild( __children["Text"] )
__children["Text"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Text1"] = GafferImage.Text( "Text1" )
parent.addChild( __children["Text1"] )
__children["Text1"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
parent["frameRange"]["end"].setValue( 4 )
parent["variables"]["imageCataloguePort"]["value"].setValue( 49271 )
Gaffer.Metadata.registerValue( parent["variables"]["imageCataloguePort"], 'readOnly', True )
Gaffer.Metadata.registerValue( parent["variables"]["projectName"]["name"], 'readOnly', True )
Gaffer.Metadata.registerValue( parent["variables"]["projectRootDirectory"]["name"], 'readOnly', True )
Gaffer.Metadata.registerValue( parent["variables"]["renderPass"]["name"], 'readOnly', True )
Gaffer.Metadata.registerValue( parent["variables"]["renderPass"]["value"], 'plugValueWidget:type', 'GafferSceneUI.RenderPassEditor._RenderPassPlugValueWidget' )
Gaffer.Metadata.registerValue( __children["ImageReader"], 'annotation:user:text', 'input image(s)' )
Gaffer.Metadata.registerValue( __children["ImageReader"], 'annotation:user:color', imath.Color3f( 0.75, 0, 0 ) )
__children["ImageReader"]["fileName"].setValue( 'C:/Users/Brian/Desktop/YOLO/img/img##.jpg' )
__children["ImageReader"]["colorSpace"].setValue( 'sRGB neutral' )
__children["ImageReader"]["__uiPosition"].setValue( imath.V2f( -85.8392944, 14.0765257 ) )
Gaffer.Metadata.registerValue( __children["ImageToTensor"], 'annotation:user:text', 'send y channel to the onnx model' )
Gaffer.Metadata.registerValue( __children["ImageToTensor"], 'annotation:user:color', imath.Color3f( 0.75, 0, 0 ) )
__children["ImageToTensor"]["image"].setInput( __children["OSLImage"]["out"] )
__children["ImageToTensor"]["channels"].setValue( IECore.StringVectorData( [ 'R' ] ) )
__children["ImageToTensor"]["__uiPosition"].setValue( imath.V2f( -96.0171204, -31.3615227 ) )
Gaffer.Metadata.registerValue( __children["Inference16"], 'annotation:user:text', 'load the onnx model' )
Gaffer.Metadata.registerValue( __children["Inference16"], 'annotation:user:color', imath.Color3f( 0.75, 0, 0 ) )
__children["Inference16"]["model"].setValue( 'super_resolution.onnx' )
__children["Inference16"]["in"][0].setInput( __children["ImageToTensor"]["tensor"] )
Gaffer.Metadata.registerValue( __children["Inference16"]["in"][0], 'label', 'images' )
Gaffer.Metadata.registerValue( __children["Inference16"]["in"][0], 'noduleLayout:label', 'images' )
Gaffer.Metadata.registerValue( __children["Inference16"]["out"][0], 'label', 'output' )
Gaffer.Metadata.registerValue( __children["Inference16"]["out"][0], 'noduleLayout:label', 'output' )
__children["Inference16"]["__uiPosition"].setValue( imath.V2f( -96.0171204, -42.7308846 ) )
__children["TensorToImage"]["tensor"].setInput( __children["Inference16"]["out"][0] )
__children["TensorToImage"]["channels"].setValue( IECore.StringVectorData( [ 'R' ] ) )
__children["TensorToImage"]["__uiPosition"].setValue( imath.V2f( -96.0171204, -54.7065735 ) )
Gaffer.Metadata.registerValue( __children["Resize"], 'annotation:user:text', 'squish image to 224x224' )
Gaffer.Metadata.registerValue( __children["Resize"], 'annotation:user:color', imath.Color3f( 0.75, 0, 0 ) )
__children["Resize"]["in"].setInput( __children["ImageReader"]["out"] )
__children["Resize"]["format"].setValue( GafferImage.Format( 224, 224, 1.000 ) )
Gaffer.Metadata.registerValue( __children["Resize"]["format"], 'formatPlugValueWidget:mode', 'custom' )
__children["Resize"]["fitMode"].setValue( 4 )
__children["Resize"]["__uiPosition"].setValue( imath.V2f( -85.8392944, 2.16234779 ) )
Gaffer.Metadata.registerValue( __children["Resize1"], 'annotation:user:text', 'resize back to widescreen aspect ratio' )
Gaffer.Metadata.registerValue( __children["Resize1"], 'annotation:user:color', imath.Color3f( 0.75, 0, 0 ) )
__children["Resize1"]["in"].setInput( __children["OSLImage2"]["out"] )
__children["Resize1"]["format"].setValue( GafferImage.Format( 1190, 672, 1.000 ) )
Gaffer.Metadata.registerValue( __children["Resize1"]["format"], 'formatPlugValueWidget:mode', 'custom' )
__children["Resize1"]["fitMode"].setValue( 4 )
__children["Resize1"]["__uiPosition"].setValue( imath.V2f( -96.0169525, -95.5761414 ) )
Gaffer.Metadata.registerValue( __children["OSLImage"], 'annotation:user:text', 'convert to ycbcr' )
Gaffer.Metadata.registerValue( __children["OSLImage"], 'annotation:user:color', imath.Color3f( 0.75, 0, 0 ) )
__children["OSLImage"]["in"].setInput( __children["Resize"]["out"] )
__children["OSLImage"]["channels"]["channel"]["value"].setInput( __children["to_yCbCr"]["out"]["output1"] )
__children["OSLImage"]["__uiPosition"].setValue( imath.V2f( -96.0171204, -14.9068356 ) )
__children["InLayer1"]["__uiPosition"].setValue( imath.V2f( -124.506256, -14.9068356 ) )
__children["to_yCbCr"]["parameters"]["input1"].setInput( __children["InLayer1"]["out"]["layerColor"] )
__children["to_yCbCr"]["code"].setValue( 'float Y = (.299 * input1.r) + (.587 * input1.g) + (.114 * input1.b);\nfloat Cb = 128 - (.168736 * input1.r) - (.331364 * input1.g) + (.5 * input1.b);\nfloat Cr = 128 + (.5 * input1.r) - (.418688 * input1.g) - (.081312 * input1.b);\n\noutput1.r = Y;\noutput1.g = Cb;\noutput1.b = Cr;' )
__children["to_yCbCr"]["__uiPosition"].setValue( imath.V2f( -111.085114, -14.9068356 ) )
Gaffer.Metadata.registerValue( __children["OSLImage2"], 'annotation:user:text', 'convert back to rgb' )
Gaffer.Metadata.registerValue( __children["OSLImage2"], 'annotation:user:color', imath.Color3f( 0.75, 0, 0 ) )
__children["OSLImage2"]["in"].setInput( __children["CopyChannels"]["out"] )
__children["OSLImage2"]["channels"]["channel"]["value"].setInput( __children["to_rgb"]["out"]["output1"] )
__children["OSLImage2"]["__uiPosition"].setValue( imath.V2f( -96.0169525, -79.7910385 ) )
__children["Resize4"]["in"].setInput( __children["OSLImage"]["out"] )
__children["Resize4"]["format"].setValue( GafferImage.Format( 672, 672, 1.000 ) )
Gaffer.Metadata.registerValue( __children["Resize4"]["format"], 'formatPlugValueWidget:mode', 'custom' )
__children["Resize4"]["filter"].setValue( 'cubic' )
__children["Resize4"]["__uiPosition"].setValue( imath.V2f( -116.646896, -31.816494 ) )
Gaffer.Metadata.registerValue( __children["CopyChannels"], 'annotation:user:text', 'merge the upscaled y channel with resized cb and cr' )
Gaffer.Metadata.registerValue( __children["CopyChannels"], 'annotation:user:color', imath.Color3f( 0.75, 0, 0 ) )
__children["CopyChannels"]["in"][0].setInput( __children["Dot1"]["out"] )
__children["CopyChannels"]["in"][1].setInput( __children["TensorToImage"]["out"] )
__children["CopyChannels"]["channels"].setValue( '[R]' )
__children["CopyChannels"]["__uiPosition"].setValue( imath.V2f( -96.0171204, -67.8739319 ) )
__children["to_rgb"]["parameters"]["input1"].setInput( __children["InLayer"]["out"]["layerColor"] )
__children["to_rgb"]["code"].setValue( 'float r = input1.r + 1.402 * (input1.b - 128);\nfloat g = input1.r - (.34414 * (input1.g - 128)) - (.71414 * (input1.b - 128));\nfloat b = input1.r + (1.772 * (input1.g - 128));\n\noutput1.r = r;\noutput1.g = g;\noutput1.b = b;' )
__children["to_rgb"]["__uiPosition"].setValue( imath.V2f( -110.889297, -79.19104 ) )
__children["InLayer"]["__uiPosition"].setValue( imath.V2f( -122.483582, -78.6167603 ) )
Gaffer.Metadata.registerValue( __children["Resize5"], 'annotation:user:text', '"control" image resized without onnx' )
Gaffer.Metadata.registerValue( __children["Resize5"], 'annotation:user:color', imath.Color3f( 0.75, 0, 0 ) )
__children["Resize5"]["in"].setInput( __children["Dot"]["out"] )
__children["Resize5"]["format"].setValue( GafferImage.Format( 672, 672, 1.000 ) )
Gaffer.Metadata.registerValue( __children["Resize5"]["format"], 'formatPlugValueWidget:mode', 'custom' )
__children["Resize5"]["__uiPosition"].setValue( imath.V2f( -56.2298012, -84.5093613 ) )
__children["Resize6"]["in"].setInput( __children["Resize5"]["out"] )
__children["Resize6"]["format"].setValue( GafferImage.Format( 1190, 672, 1.000 ) )
Gaffer.Metadata.registerValue( __children["Resize6"]["format"], 'formatPlugValueWidget:mode', 'custom' )
__children["Resize6"]["fitMode"].setValue( 4 )
__children["Resize6"]["__uiPosition"].setValue( imath.V2f( -56.2298012, -95.5962524 ) )
__children["Dot"]["in"].setInput( __children["Resize"]["out"] )
__children["Dot"]["__uiPosition"].setValue( imath.V2f( -56.2298012, -14.9830427 ) )
__children["Dot1"]["in"].setInput( __children["Resize4"]["out"] )
__children["Dot1"]["__uiPosition"].setValue( imath.V2f( -116.646896, -60.5419006 ) )
__children["ContactSheet"]["in"][0].setInput( __children["Text"]["out"] )
__children["ContactSheet"]["in"][1].setInput( __children["Text1"]["out"] )
__children["ContactSheet"]["out"].setInput( __children["ContactSheet"]["BoxOut"]["__out"] )
__children["ContactSheet"]["format"].setValue( GafferImage.Format( 1190, 1344, 1.000 ) )
Gaffer.Metadata.registerValue( __children["ContactSheet"]["format"], 'formatPlugValueWidget:mode', 'custom' )
__children["ContactSheet"]["mode"].setValue( 2 )
__children["ContactSheet"]["divisions"].setValue( imath.V2i( 1, 1 ) )
__children["ContactSheet"]["outDivisions"].setInput( __children["ContactSheet"]["Divisions"]["out"] )
__children["ContactSheet"]["spacing"]["y"].setInput( __children["ContactSheet"]["spacing"]["x"] )
__children["ContactSheet"]["marginTop"].setInput( __children["ContactSheet"]["spacing"]["y"] )
__children["ContactSheet"]["marginBottom"].setInput( __children["ContactSheet"]["spacing"]["y"] )
__children["ContactSheet"]["marginLeft"].setInput( __children["ContactSheet"]["spacing"]["x"] )
__children["ContactSheet"]["marginRight"].setInput( __children["ContactSheet"]["spacing"]["x"] )
__children["ContactSheet"]["__uiPosition"].setValue( imath.V2f( -80.2839584, -121.887459 ) )
__children["Text"]["in"].setInput( __children["Resize1"]["out"] )
__children["Text"]["color"].setValue( imath.Color4f( 0.764999986, 0, 0, 1 ) )
__children["Text"]["shadow"].setValue( True )
__children["Text"]["shadowOffset"].setValue( imath.V2f( 2, -2 ) )
__children["Text"]["shadowBlur"].setValue( 3.0 )
__children["Text"]["text"].setValue( 'Upscaled with ONNX' )
__children["Text"]["size"].setValue( imath.V2i( 40, 40 ) )
__children["Text"]["area"].setValue( imath.Box2i( imath.V2i( 0, 0 ), imath.V2i( 1190, 672 ) ) )
__children["Text"]["transform"]["translate"].setValue( imath.V2f( 10, -10 ) )
__children["Text"]["__uiPosition"].setValue( imath.V2f( -96.0169525, -105.910408 ) )
__children["Text1"]["in"].setInput( __children["Resize6"]["out"] )
__children["Text1"]["color"].setInput( __children["Text"]["color"] )
__children["Text1"]["shadow"].setInput( __children["Text"]["shadow"] )
__children["Text1"]["shadowColor"].setInput( __children["Text"]["shadowColor"] )
__children["Text1"]["shadowOffset"].setInput( __children["Text"]["shadowOffset"] )
__children["Text1"]["shadowBlur"].setInput( __children["Text"]["shadowBlur"] )
__children["Text1"]["text"].setValue( 'Resized (no ONNX)' )
__children["Text1"]["font"].setInput( __children["Text"]["font"] )
__children["Text1"]["size"].setInput( __children["Text"]["size"] )
__children["Text1"]["area"].setValue( imath.Box2i( imath.V2i( 0, 0 ), imath.V2i( 1190, 672 ) ) )
__children["Text1"]["transform"]["translate"].setInput( __children["Text"]["transform"]["translate"] )
__children["Text1"]["__uiPosition"].setValue( imath.V2f( -56.2298012, -106.683159 ) )


del __children
